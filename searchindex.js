Search.setIndex({"alltitles": {"1. Brute-force solver": [[2, "1.-Brute-force-solver"]], "2. LP solver": [[2, "2.-LP-solver"]], "API reference": [[9, "api-reference"]], "Achieving different fairness constraints on synthetic data": [[7, "Achieving-different-fairness-constraints-on-synthetic-data"]], "Achieving equalized odds on real-world ACS data (ACSIncome)": [[5, "Achieving-equalized-odds-on-real-world-ACS-data-(ACSIncome)"]], "Achieving equalized odds on synthetic data": [[6, "Achieving-equalized-odds-on-synthetic-data"]], "Citing": [[8, "citing"], [11, "citing"]], "Compare accuracy and constraint violation": [[2, "Compare-accuracy-and-constraint-violation"]], "Comparing LP vs brute-force solution": [[2, "Comparing-LP-vs-brute-force-solution"]], "Comparison between error-parity\u2019s LP solver and a brute-force solver": [[2, "Comparison-between-error-parity's-LP-solver-and-a-brute-force-solver"]], "Compute distances between theorized ROC points and empirical ROC points": [[6, "Compute-distances-between-theorized-ROC-points-and-empirical-ROC-points"], [7, "Compute-distances-between-theorized-ROC-points-and-empirical-ROC-points"]], "Compute empirical fairness violation": [[7, "Compute-empirical-fairness-violation"]], "Compute performance differences": [[6, "Compute-performance-differences"], [7, "Compute-performance-differences"]], "Construct the fair optimal classifier (derived from the given predictor)": [[5, "Construct-the-fair-optimal-classifier-(derived-from-the-given-predictor)"], [6, "Construct-the-fair-optimal-classifier-(derived-from-the-given-predictor)"], [7, "Construct-the-fair-optimal-classifier-(derived-from-the-given-predictor)"]], "Equalized odds relaxations": [[11, "equalized-odds-relaxations"]], "Example jupyter notebooks": [[1, "example-jupyter-notebooks"]], "Example usage of error-parity with other fairness-constrained classifiers": [[3, "Example-usage-of-error-parity-with-other-fairness-constrained-classifiers"]], "Fairness constraints": [[11, "fairness-constraints"]], "Fairness vs Performance trade-off": [[5, "Fairness-vs-Performance-trade-off"]], "Fetch UCI Adult data": [[3, "Fetch-UCI-Adult-data"]], "Fit and plot similar example but using \u201cEqual Opportunity\u201d fairness metric": [[5, "Fit-and-plot-similar-example-but-using-%22Equal-Opportunity%22-fairness-metric"]], "Getting started": [[11, "getting-started"]], "Given a trained predictor (that outputs real-valued scores)": [[2, "Given-a-trained-predictor-(that-outputs-real-valued-scores)"], [5, "Given-a-trained-predictor-(that-outputs-real-valued-scores)"], [6, "Given-a-trained-predictor-(that-outputs-real-valued-scores)"], [7, "Given-a-trained-predictor-(that-outputs-real-valued-scores)"]], "Given some data (X, Y, S)": [[2, "Given-some-data-(X,-Y,-S)"], [5, "Given-some-data-(X,-Y,-S)"], [6, "Given-some-data-(X,-Y,-S)"], [7, "Given-some-data-(X,-Y,-S)"]], "How it works": [[11, "how-it-works"]], "Indices": [[8, "indices"]], "Installing": [[11, "installing"]], "Let\u2019s train another type of fairness-aware model": [[3, "Let's-train-another-type-of-fairness-aware-model"]], "Log the constant classifier accuracy for each dataset and data type": [[4, "Log-the-constant-classifier-accuracy-for-each-dataset-and-data-type"]], "Map attainable fairness-accuracy trade-offs via (relaxed) post-processing": [[3, "Map-attainable-fairness-accuracy-trade-offs-via-(relaxed)-post-processing"]], "NOTE: change the FAIRNESS_CONSTRAINT to your target fairness constraint.": [[7, "NOTE:-change-the-FAIRNESS_CONSTRAINT-to-your-target-fairness-constraint."]], "Notebooks Gallery": [[10, "notebooks-gallery"]], "Obtaining parsed folktables datasets": [[4, "Obtaining-parsed-folktables-datasets"]], "Plot Fairness-Accuracy Pareto frontier achievable by postprocessing": [[7, "Plot-Fairness-Accuracy-Pareto-frontier-achievable-by-postprocessing"]], "Plot post-processing adjustment frontier": [[3, "Plot-post-processing-adjustment-frontier"]], "Plot postprocessing Pareto frontier": [[6, "Plot-postprocessing-Pareto-frontier"]], "Plot realized ROC points": [[5, "Plot-realized-ROC-points"], [6, "Plot-realized-ROC-points"], [7, "Plot-realized-ROC-points"]], "Plot solution": [[5, "Plot-solution"], [6, "Plot-solution"], [7, "Plot-solution"]], "README.md": [[11, "readme-md"]], "Theoretical results:": [[5, "Theoretical-results:"]], "Train a standard (unconstrained) classifier": [[3, "Train-a-standard-(unconstrained)-classifier"]], "Welcome to error-parity\u2019s documentation!": [[8, "welcome-to-error-parity-s-documentation"]], "error-parity    <!-- omit in toc -->": [[11, "error-parity"]], "error_parity package": [[0, "error-parity-package"]], "error_parity.binarize module": [[0, "module-error_parity.binarize"]], "error_parity.classifiers module": [[0, "module-error_parity.classifiers"]], "error_parity.cvxpy_utils module": [[0, "module-error_parity.cvxpy_utils"]], "error_parity.evaluation module": [[0, "module-error_parity.evaluation"]], "error_parity.pareto_curve module": [[0, "module-error_parity.pareto_curve"]], "error_parity.plotting module": [[0, "module-error_parity.plotting"]], "error_parity.roc_utils module": [[0, "module-error_parity.roc_utils"]], "error_parity.threshold_optimizer module": [[0, "module-error_parity.threshold_optimizer"]]}, "docnames": ["error_parity", "examples/README", "examples/brute-force-example_equalized-odds-thresholding", "examples/example-with-postprocessing-and-inprocessing", "examples/parse-folktables-datasets", "examples/relaxed-equalized-odds.usage-example-folktables", "examples/relaxed-equalized-odds.usage-example-synthetic-data", "examples/usage-example-for-other-constraints.synthetic-data", "index", "modules", "notebooks", "readme"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["error_parity.rst", "examples/README.md", "examples/brute-force-example_equalized-odds-thresholding.ipynb", "examples/example-with-postprocessing-and-inprocessing.ipynb", "examples/parse-folktables-datasets.ipynb", "examples/relaxed-equalized-odds.usage-example-folktables.ipynb", "examples/relaxed-equalized-odds.usage-example-synthetic-data.ipynb", "examples/usage-example-for-other-constraints.synthetic-data.ipynb", "index.rst", "modules.rst", "notebooks.rst", "readme.rst"], "indexentries": {"binaryclassifier (class in error_parity.classifiers)": [[0, "error_parity.classifiers.BinaryClassifier", false]], "binaryclassifieratrocdiagonal (class in error_parity.classifiers)": [[0, "error_parity.classifiers.BinaryClassifierAtROCDiagonal", false]], "calc_cost_of_point() (in module error_parity.roc_utils)": [[0, "error_parity.roc_utils.calc_cost_of_point", false]], "classifier (class in error_parity.classifiers)": [[0, "error_parity.classifiers.Classifier", false]], "compute_binary_predictions() (in module error_parity.binarize)": [[0, "error_parity.binarize.compute_binary_predictions", false]], "compute_fair_optimum() (in module error_parity.cvxpy_utils)": [[0, "error_parity.cvxpy_utils.compute_fair_optimum", false]], "compute_global_roc_from_groupwise() (in module error_parity.roc_utils)": [[0, "error_parity.roc_utils.compute_global_roc_from_groupwise", false]], "compute_halfspace_inequality() (in module error_parity.cvxpy_utils)": [[0, "error_parity.cvxpy_utils.compute_halfspace_inequality", false]], "compute_inner_and_outer_adjustment_ci() (in module error_parity.pareto_curve)": [[0, "error_parity.pareto_curve.compute_inner_and_outer_adjustment_ci", false]], "compute_line() (in module error_parity.cvxpy_utils)": [[0, "error_parity.cvxpy_utils.compute_line", false]], "compute_postprocessing_curve() (in module error_parity.pareto_curve)": [[0, "error_parity.pareto_curve.compute_postprocessing_curve", false]], "compute_roc_point_from_predictions() (in module error_parity.roc_utils)": [[0, "error_parity.roc_utils.compute_roc_point_from_predictions", false]], "constraint_violation() (error_parity.threshold_optimizer.relaxedthresholdoptimizer method)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.constraint_violation", false]], "construct_at_target_roc() (error_parity.classifiers.randomizedclassifier static method)": [[0, "error_parity.classifiers.RandomizedClassifier.construct_at_target_ROC", false]], "cost() (error_parity.threshold_optimizer.relaxedthresholdoptimizer method)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.cost", false]], "demographic_parity_violation() (error_parity.threshold_optimizer.relaxedthresholdoptimizer method)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.demographic_parity_violation", false]], "ensemblegroupwiseclassifiers (class in error_parity.classifiers)": [[0, "error_parity.classifiers.EnsembleGroupwiseClassifiers", false]], "equalized_odds_violation() (error_parity.threshold_optimizer.relaxedthresholdoptimizer method)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.equalized_odds_violation", false]], "error_parity.binarize": [[0, "module-error_parity.binarize", false]], "error_parity.classifiers": [[0, "module-error_parity.classifiers", false]], "error_parity.cvxpy_utils": [[0, "module-error_parity.cvxpy_utils", false]], "error_parity.evaluation": [[0, "module-error_parity.evaluation", false]], "error_parity.pareto_curve": [[0, "module-error_parity.pareto_curve", false]], "error_parity.plotting": [[0, "module-error_parity.plotting", false]], "error_parity.roc_utils": [[0, "module-error_parity.roc_utils", false]], "error_parity.threshold_optimizer": [[0, "module-error_parity.threshold_optimizer", false]], "error_rate_parity_constraint_violation() (error_parity.threshold_optimizer.relaxedthresholdoptimizer method)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.error_rate_parity_constraint_violation", false]], "eval_accuracy_and_equalized_odds() (in module error_parity.evaluation)": [[0, "error_parity.evaluation.eval_accuracy_and_equalized_odds", false]], "evaluate_fairness() (in module error_parity.evaluation)": [[0, "error_parity.evaluation.evaluate_fairness", false]], "evaluate_performance() (in module error_parity.evaluation)": [[0, "error_parity.evaluation.evaluate_performance", false]], "evaluate_predictions() (in module error_parity.evaluation)": [[0, "error_parity.evaluation.evaluate_predictions", false]], "evaluate_predictions_bootstrap() (in module error_parity.evaluation)": [[0, "error_parity.evaluation.evaluate_predictions_bootstrap", false]], "find_points_for_target_roc() (error_parity.classifiers.randomizedclassifier static method)": [[0, "error_parity.classifiers.RandomizedClassifier.find_points_for_target_ROC", false]], "find_weights_given_two_points() (error_parity.classifiers.randomizedclassifier static method)": [[0, "error_parity.classifiers.RandomizedClassifier.find_weights_given_two_points", false]], "fit() (error_parity.threshold_optimizer.relaxedthresholdoptimizer method)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.fit", false]], "fit_and_evaluate_postprocessing() (in module error_parity.pareto_curve)": [[0, "error_parity.pareto_curve.fit_and_evaluate_postprocessing", false]], "get_envelope_of_postprocessing_frontier() (in module error_parity.pareto_curve)": [[0, "error_parity.pareto_curve.get_envelope_of_postprocessing_frontier", false]], "global_prevalence (error_parity.threshold_optimizer.relaxedthresholdoptimizer property)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.global_prevalence", false]], "global_roc_point (error_parity.threshold_optimizer.relaxedthresholdoptimizer property)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.global_roc_point", false]], "groupwise_prevalence (error_parity.threshold_optimizer.relaxedthresholdoptimizer property)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.groupwise_prevalence", false]], "groupwise_roc_data (error_parity.threshold_optimizer.relaxedthresholdoptimizer property)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.groupwise_roc_data", false]], "groupwise_roc_hulls (error_parity.threshold_optimizer.relaxedthresholdoptimizer property)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.groupwise_roc_hulls", false]], "groupwise_roc_points (error_parity.threshold_optimizer.relaxedthresholdoptimizer property)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.groupwise_roc_points", false]], "make_cvxpy_halfspace_inequality() (in module error_parity.cvxpy_utils)": [[0, "error_parity.cvxpy_utils.make_cvxpy_halfspace_inequality", false]], "make_cvxpy_point_in_polygon_constraints() (in module error_parity.cvxpy_utils)": [[0, "error_parity.cvxpy_utils.make_cvxpy_point_in_polygon_constraints", false]], "module": [[0, "module-error_parity.binarize", false], [0, "module-error_parity.classifiers", false], [0, "module-error_parity.cvxpy_utils", false], [0, "module-error_parity.evaluation", false], [0, "module-error_parity.pareto_curve", false], [0, "module-error_parity.plotting", false], [0, "module-error_parity.roc_utils", false], [0, "module-error_parity.threshold_optimizer", false]], "plot_polygon_edges() (in module error_parity.plotting)": [[0, "error_parity.plotting.plot_polygon_edges", false]], "plot_postprocessing_frontier() (in module error_parity.plotting)": [[0, "error_parity.plotting.plot_postprocessing_frontier", false]], "plot_postprocessing_solution() (in module error_parity.plotting)": [[0, "error_parity.plotting.plot_postprocessing_solution", false]], "predict() (error_parity.threshold_optimizer.relaxedthresholdoptimizer method)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer.predict", false]], "randomizedclassifier (class in error_parity.classifiers)": [[0, "error_parity.classifiers.RandomizedClassifier", false]], "relaxedthresholdoptimizer (class in error_parity.threshold_optimizer)": [[0, "error_parity.threshold_optimizer.RelaxedThresholdOptimizer", false]], "roc_convex_hull() (in module error_parity.roc_utils)": [[0, "error_parity.roc_utils.roc_convex_hull", false]]}, "objects": {"error_parity": [[0, 0, 0, "-", "binarize"], [0, 0, 0, "-", "classifiers"], [0, 0, 0, "-", "cvxpy_utils"], [0, 0, 0, "-", "evaluation"], [0, 0, 0, "-", "pareto_curve"], [0, 0, 0, "-", "plotting"], [0, 0, 0, "-", "roc_utils"], [0, 0, 0, "-", "threshold_optimizer"]], "error_parity.binarize": [[0, 1, 1, "", "compute_binary_predictions"]], "error_parity.classifiers": [[0, 2, 1, "", "BinaryClassifier"], [0, 2, 1, "", "BinaryClassifierAtROCDiagonal"], [0, 2, 1, "", "Classifier"], [0, 2, 1, "", "EnsembleGroupwiseClassifiers"], [0, 2, 1, "", "RandomizedClassifier"]], "error_parity.classifiers.RandomizedClassifier": [[0, 3, 1, "", "construct_at_target_ROC"], [0, 3, 1, "", "find_points_for_target_ROC"], [0, 3, 1, "", "find_weights_given_two_points"]], "error_parity.cvxpy_utils": [[0, 1, 1, "", "compute_fair_optimum"], [0, 1, 1, "", "compute_halfspace_inequality"], [0, 1, 1, "", "compute_line"], [0, 1, 1, "", "make_cvxpy_halfspace_inequality"], [0, 1, 1, "", "make_cvxpy_point_in_polygon_constraints"]], "error_parity.evaluation": [[0, 1, 1, "", "eval_accuracy_and_equalized_odds"], [0, 1, 1, "", "evaluate_fairness"], [0, 1, 1, "", "evaluate_performance"], [0, 1, 1, "", "evaluate_predictions"], [0, 1, 1, "", "evaluate_predictions_bootstrap"]], "error_parity.pareto_curve": [[0, 1, 1, "", "compute_inner_and_outer_adjustment_ci"], [0, 1, 1, "", "compute_postprocessing_curve"], [0, 1, 1, "", "fit_and_evaluate_postprocessing"], [0, 1, 1, "", "get_envelope_of_postprocessing_frontier"]], "error_parity.plotting": [[0, 1, 1, "", "plot_polygon_edges"], [0, 1, 1, "", "plot_postprocessing_frontier"], [0, 1, 1, "", "plot_postprocessing_solution"]], "error_parity.roc_utils": [[0, 1, 1, "", "calc_cost_of_point"], [0, 1, 1, "", "compute_global_roc_from_groupwise"], [0, 1, 1, "", "compute_roc_point_from_predictions"], [0, 1, 1, "", "roc_convex_hull"]], "error_parity.threshold_optimizer": [[0, 2, 1, "", "RelaxedThresholdOptimizer"]], "error_parity.threshold_optimizer.RelaxedThresholdOptimizer": [[0, 3, 1, "", "constraint_violation"], [0, 3, 1, "", "cost"], [0, 3, 1, "", "demographic_parity_violation"], [0, 3, 1, "", "equalized_odds_violation"], [0, 3, 1, "", "error_rate_parity_constraint_violation"], [0, 3, 1, "", "fit"], [0, 4, 1, "", "global_prevalence"], [0, 4, 1, "", "global_roc_point"], [0, 4, 1, "", "groupwise_prevalence"], [0, 4, 1, "", "groupwise_roc_data"], [0, 4, 1, "", "groupwise_roc_hulls"], [0, 4, 1, "", "groupwise_roc_points"], [0, 3, 1, "", "predict"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property"}, "terms": {"": [0, 4, 11], "0": [0, 2, 3, 4, 5, 6, 7, 11], "000": [5, 6, 7], "000282458": 7, "00044025": 5, "000574791": 6, "000851617415307666": 3, "003": [6, 7], "007": 5, "01": [0, 5, 6, 7], "010": 5, "017": 5, "02": [0, 5, 6, 7], "03": [0, 3, 5, 6, 7], "036": 7, "03632111": 7, "04": [0, 5, 6, 7], "04159198": 7, "04660537497114363": 2, "0498": 3, "05": [0, 2, 5, 6, 7, 11], "052": 5, "05891875": 6, "05919955": 6, "06": [0, 5, 6, 7], "063": 6, "0673": 3, "07": [0, 5, 6, 7], "07436224": 6, "08": [0, 5, 6, 7], "089": 6, "09": [0, 5, 6, 7], "092": 7, "0x11df428c0": 6, "0x12b1a5db0": 7, "0x163262380": 5, "0x16dac2650": 3, "1": [0, 3, 4, 5, 6, 7, 11], "10": [2, 3, 4, 5, 6, 7], "100": [3, 7], "1000": 0, "100_000": [2, 6, 7], "10263456": 5, "104": 2, "10552007": 7, "10639373": 6, "108": 2, "109": 2, "11": [0, 2, 3, 5, 6, 7], "114": 5, "114m": 2, "11605835": 7, "118": 5, "12": [0, 2, 3, 5, 6, 7], "12570": 5, "12760711": 5, "13": [0, 2, 3, 5, 6, 7], "14": [0, 2, 3, 5, 6, 7], "14162381": 5, "14576582": 5, "14840647": 5, "15": [0, 2, 3, 5, 6, 7], "152": 7, "15335531408011688": 7, "16": [0, 2, 3, 5, 6, 7], "161": 7, "17": [0, 3, 5, 6, 7], "17475045311134396": 6, "18": [0, 2, 3, 5, 6, 7], "19": [0, 5, 6, 7], "19386": 5, "199": [6, 7], "1_000_000": [2, 6, 7], "1e": [2, 3, 5], "1min": [3, 5], "1st": [0, 4], "2": [0, 3, 4, 5, 6, 7], "20": [3, 5], "200": [0, 3, 5, 6, 7], "201182803373743": 5, "2016": 11, "2018": [3, 4], "2020": 3, "2023": 3, "2024": [8, 11], "208": [5, 6], "21": 5, "218": 5, "22": 5, "23": [2, 5, 6, 7], "23852472": 7, "24": 5, "242": 7, "25": [2, 5, 6, 7], "259521": 5, "26": [2, 5, 6, 7], "27": [2, 5], "28": 5, "282": 6, "286": 4, "29": 5, "29518": 5, "2_max": 5, "2_valid": 5, "2e": 5, "2nd": [0, 4], "3": [0, 2, 3, 4, 5, 6, 7], "322": 7, "3236107": 4, "336": 7, "34": 4, "35": 5, "36": 7, "37": 5, "38": 7, "39": [2, 3], "3min": 2, "3rd": 4, "4": [0, 2, 3, 4, 5, 6, 7], "41": 7, "42": [0, 2, 4, 5], "4356": 2, "441": 6, "45": 5, "46": 5, "47": 5, "475": 6, "48": 5, "49": 3, "4min": 2, "5": [0, 2, 3, 4, 5, 6, 7], "50": [3, 5], "50k": 3, "53750647": 6, "5397890715398488": 4, "5401004328892394": 4, "5415303116248027": 4, "54775546": 6, "55319488": 6, "55402037": 6, "559": 6, "5620214827548473": 4, "5622398192707292": 4, "5624768352647576": 4, "58": 3, "59": 3, "5e": 3, "6": [0, 2, 3, 4, 5, 6, 7], "6267948098880045": 4, "6275487157120827": 4, "6276484057384071": 4, "65": 0, "65242546": 5, "678": 7, "69338557": 7, "69846535": 5, "6_test": 5, "7": [0, 2, 3, 4, 5, 6, 7], "7000000000000001": 2, "70242546": 5, "7048998544597685": 4, "705777716173447": 4, "7080615054796799": 4, "71687162": 7, "72": 2, "73": 6, "7358002054311933": 4, "7366843896876353": 4, "7369037614281713": 4, "74338557": 7, "76": 6, "7607125098715961": 3, "7607315908005187": 3, "79": 5, "8": [0, 2, 3, 4, 5, 6, 7], "80": [2, 5], "80763": 2, "81": 5, "82": [2, 6], "84": 7, "867": 3, "87": 3, "885": 3, "886": 5, "9": [0, 2, 3, 5, 6, 7], "90": [3, 5], "95": [0, 3], "96": 2, "97": 0, "A": [0, 5, 11], "And": 4, "As": [0, 2, 6, 7], "By": [0, 3], "For": 0, "If": [0, 4], "In": [0, 3, 5], "It": 8, "No": 5, "On": [3, 5], "One": 0, "Or": 11, "That": [0, 3], "The": [0, 4, 5, 7, 8, 11], "Will": 0, "_": [2, 3, 7], "__": 3, "__call__": [0, 6, 7], "__version__": [2, 3, 5, 6, 7], "_fair": 11, "_high": 3, "_low": 3, "_max": 4, "_mean": 3, "_moment": 3, "_pmf_predict": 3, "_test": 4, "_valid": 4, "abc": [0, 2], "abov": [2, 6, 7, 11], "absolut": [0, 11], "ac": 4, "acc": [3, 5, 6, 7], "acc_unfair_best": 5, "acc_unfair_threshold": 5, "acc_val": 5, "accord": [0, 4], "accordingli": 11, "accuraci": [0, 1, 5, 6, 8], "accuracy_fit": 5, "accuracy_mean": 3, "accuracy_mean_test": 0, "accuracy_scor": [5, 6, 7], "accuracy_v": [6, 7], "achiev": [0, 2, 8, 11], "across": 0, "acs_categorical_col": [4, 5], "acs_data": 4, "acs_task": [4, 5], "acsdatasourc": 4, "acsemploy": 4, "acsincom": [1, 4], "acsmobl": 4, "acspubliccoverag": 4, "acstraveltim": 4, "actual": [2, 5, 6, 7, 11], "actual_point": [5, 6, 7], "actual_preval": [2, 5, 6, 7], "ad": 4, "add": [2, 4, 6, 7], "addit": 8, "addition": 7, "adjust": [0, 5, 6, 7, 11], "after": 0, "against": 2, "agarw": 3, "al": [3, 11], "alaska": 5, "algorithm": [1, 8, 11], "all": [0, 2, 4, 6, 8], "all_acs_task": 4, "all_data": 5, "all_group_color": [5, 6, 7], "all_groups_name_map": 5, "allow": [0, 8], "alon": 1, "alreadi": [0, 2, 3, 6, 7], "also": 3, "alter": 11, "alwai": 4, "ambigu": 4, "amer": 3, "american": 5, "among": [0, 5, 6, 7], "an": [0, 1, 3, 11], "anc": [4, 5], "ancestri": [4, 5], "andr": [8, 11], "andrefcruz": 0, "ani": [0, 7, 8, 11], "annot": 3, "anoth": 0, "api": [8, 11], "api_refer": 0, "append": [4, 5, 6, 7], "appli": 0, "appropri": 0, "ar": [0, 7, 8, 11], "arang": [2, 3, 5, 6, 7], "argument": [0, 5, 11], "arrai": [0, 2, 3], "art": 3, "as_fram": 3, "ascend": 4, "asian": [3, 5], "assert": [2, 4, 6, 7], "associ": 0, "assum": [0, 2, 5, 6, 7], "astyp": [2, 3, 4, 5, 6, 7], "atom": 0, "attain": [1, 6, 8], "attribut": [0, 3, 4], "author": [8, 11], "auto": [2, 4, 5], "avail": [0, 1, 8, 11], "averag": 11, "average_abs_odds_differ": [0, 11], "avoid": 0, "awai": 4, "ax": 0, "ax_kwarg": 3, "axi": 0, "axvlin": 3, "b": [0, 11], "base": [0, 1, 3, 8, 11], "baselin": 2, "basi": 8, "basicconfig": [5, 6, 7], "basicproblem": 4, "bbox_to_anchor": 3, "becaus": 2, "belong": [0, 2, 4, 6, 7], "below": [2, 3], "best": [2, 5, 7], "best_accuraci": 2, "best_combi": 2, "best_eq_odds_viol": 2, "between": [0, 1, 5, 8, 11], "bf": 2, "bf_acc": 2, "bf_eq_odd": 2, "big": 4, "big_group": 4, "big_groups_filt": 4, "bigstar": [3, 5, 6], "binar": [2, 3, 9], "binari": [0, 4, 11], "binarize_predict": 2, "binarized_pr": 2, "binaryclassifi": 0, "binaryclassifieratrocdiagon": 0, "birth": [4, 5], "bit": 0, "black": [0, 3, 4, 5, 7], "blob": 0, "booktitl": [8, 11], "bool": [0, 4], "boolean": 2, "bootstrap": [0, 3, 5, 6, 7], "bootstrap_kwarg": 0, "borderaxespad": 3, "both": 0, "bound": 0, "box": [0, 7], "branch": 8, "brute": 1, "brute_force_solut": 2, "c": [0, 5], "calc_cost_of_point": [0, 5, 6, 7], "calcul": [0, 7], "call": [0, 3], "callabl": [0, 7, 11], "can": [0, 2, 3, 4, 5, 6, 7, 8, 11], "case": 0, "cat_col": 5, "categor": [4, 5], "categori": [4, 5], "ceil": 2, "cell": [3, 5], "center": 3, "chang": [4, 5, 11], "character": 2, "check": [3, 4, 7, 8], "choos": 11, "chosen": 11, "ci": 3, "cit": [4, 5], "citizenship": [4, 5], "class": [0, 4, 5], "classifi": [2, 9, 11], "classifier_": 11, "clf": [2, 5, 6, 7], "clock": 0, "clone": 11, "close": 7, "code": [4, 5, 8], "col": [4, 5], "collect": 2, "color": [0, 3, 5, 6, 7], "color_palett": [5, 6, 7], "colorblind": 3, "cols_ord": 4, "column": [0, 3, 4, 5], "com": [0, 3, 11], "combi": 2, "combin": [0, 2], "comment": 3, "common": [0, 3], "commun": 11, "companion": 5, "compar": [0, 11], "comparison": 1, "compat": [0, 8], "compos": 5, "comput": [0, 5, 11], "compute_binary_predict": 0, "compute_constant_clf_accuraci": 3, "compute_fair_optimum": 0, "compute_global_roc_from_groupwis": 0, "compute_halfspace_inequ": 0, "compute_inner_and_outer_adjustment_ci": 0, "compute_lin": 0, "compute_postproc_kwarg": 3, "compute_postprocessing_curv": [0, 3, 5, 6, 7], "compute_roc_point_from_predict": [0, 5, 6, 7], "conclus": 2, "confer": [8, 11], "confid": 0, "confidence_pct": 0, "consider": 3, "const_pr": [3, 5, 6, 7], "const_predictor_acc": 4, "constant": [0, 2, 3, 6], "constant_clf_accuraci": 3, "constant_clf_disp": 0, "constant_clf_perf": [0, 3, 5, 6, 7], "constrain": [2, 5, 11], "constraint": [0, 1, 3, 5, 6], "constraint_nam": 0, "constraint_viol": [0, 5, 7], "construct": [0, 2], "construct_at_target_roc": 0, "constructor": [0, 11], "contain": [0, 5, 6, 7], "content": [3, 11], "continu": [0, 5], "contribut": 11, "converg": [5, 6, 7], "convex": [0, 5, 6, 7, 11], "convexhul": [2, 5, 6, 7], "copi": [0, 4], "correct": 4, "correl": 0, "correspond": [0, 3, 11], "cost": [0, 5, 6, 7], "couldn": 5, "counter": 0, "cow": [4, 5], "cp": [2, 5, 6, 7], "cpu": [2, 3, 5, 6, 7], "cpu_count": [0, 3], "creat": [0, 4], "criteria": [3, 11], "criterion": 11, "cruz": [3, 8, 11], "cruz2024unprocess": [8, 11], "csv": [4, 5], "curios": [1, 2], "curr_accuraci": 2, "curr_const_clf_acc": 3, "curr_data": 4, "curr_eq_odds_viol": 2, "curr_realized_roc_point": [5, 6, 7], "curr_result": 2, "curr_typ": 4, "current": [2, 11], "curv": [0, 5, 6, 7, 11], "cvxpy": [0, 2, 5, 6, 7, 11], "cvxpy_point": 0, "cvxpy_util": 9, "d": 0, "data": [0, 1, 11], "data_1": 0, "data_dir": [4, 5], "data_nam": 0, "data_sourc": 4, "data_triplet": 0, "data_tupl": 2, "data_typ": [0, 5], "datafram": [0, 4, 5], "dataset": [0, 1, 3, 5, 6, 7], "datasheet": 4, "dear": [4, 5], "deepcopi": 4, "def": [2, 3, 4, 5, 6, 7], "default": [0, 5, 7, 11], "default_rng": [2, 6, 7], "defin": [0, 2, 6, 7], "definit": 4, "delet": 4, "demograph": [0, 1, 11], "demographic_par": [7, 11], "demographic_parity_viol": 0, "depend": 4, "descript": 1, "detail": 11, "determinist": [0, 2], "dev": [2, 5, 6, 7], "develop": 11, "dey": [4, 5], "df": [0, 4, 5], "df_to_numpi": 4, "di": [4, 5], "diag": 0, "diagon": 0, "dict": [0, 2, 3, 5], "dictat": 11, "dictionari": 0, "diff": 3, "differ": [0, 2, 3, 11], "dir_path": 5, "disabl": [4, 5], "disadvantag": 3, "discard": 4, "discret": 0, "disk": [4, 5], "disp_col": 0, "disp_metr": [0, 3, 5, 6, 7], "dispar": 0, "disparity_metr": 7, "disparity_metric_map": 7, "displai": [0, 5], "disproportion": 3, "dist": [5, 6, 7], "distanc": [0, 5, 11], "distribut": 0, "divid": 0, "do": 4, "document": 11, "don": 4, "download": [1, 3, 4, 5], "dpi": [3, 5, 6, 7], "draw": 0, "drem": [4, 5], "drop": 4, "dtype": [2, 3, 4], "dummi": [0, 2, 3, 6], "dump": 4, "dure": 3, "dynam": 4, "e": [0, 3, 4, 6, 8, 11], "each": [0, 2, 3, 5, 6, 7, 11], "easili": [5, 8], "effici": 2, "either": 4, "elem": 3, "ell_": [5, 6], "els": [2, 3, 4, 5, 6], "empir": 5, "empirical_constraint_viol": 7, "empirical_metr": 7, "employ": [4, 5], "encapsul": 0, "encod": 4, "enforc": [0, 4], "ensembl": 5, "ensemblegroupwiseclassifi": 0, "entir": 5, "enumer": [5, 6, 7], "envelop": 0, "environ": [3, 5], "epsilon_toler": [2, 5, 6, 7], "eq": [2, 6], "eq_odd": 2, "eq_odds_viol": 2, "equal": [0, 1, 2, 3, 7], "equalized_odd": [0, 2, 3, 5, 6, 7, 11], "equalized_odds_diff": [3, 7], "equalized_odds_diff_l": [5, 6], "equalized_odds_diff_mean": 3, "equalized_odds_diff_mean_test": 0, "equalized_odds_viol": 0, "equalizedodd": 3, "equat": 11, "error": [0, 5, 6, 7], "error_par": [2, 3, 5, 6, 7, 9, 11], "error_rate_parity_constraint_viol": 0, "error_typ": 0, "eskimo": 3, "esp": [4, 5], "esr": [4, 5], "estim": [0, 3], "et": [3, 11], "eval": 0, "eval_accuracy_and_equalized_odd": [0, 2, 5, 6], "eval_data": [0, 3, 5, 6, 7], "evalu": [2, 3, 5, 6, 7, 9, 11], "evaluate_fair": [0, 7], "evaluate_perform": 0, "evaluate_predict": 0, "evaluate_predictions_bootstrap": [0, 3], "exactli": [0, 2], "exampl": [0, 2, 6, 7, 8, 11], "example_equ": 1, "exce": 4, "exhaust": 2, "exist": [0, 5], "exist_ok": 4, "expandus": [4, 5], "expect": [0, 5, 6, 7], "experi": 4, "exponentiatedgradi": 3, "exponentiatedgradientexponentiatedgradi": 3, "express": 0, "exterior": 0, "extra": [0, 2, 3, 5, 6, 7], "extract": 0, "f": [2, 3, 4, 5, 6, 7], "fair": [0, 1, 8], "fair_clf": 11, "fairlearn": 3, "fairness_constraint": [0, 3, 5, 6], "fals": [0, 3, 4, 5, 6, 7], "false_neg_cost": [0, 2, 5, 6, 7], "false_negative_cost": 0, "false_negative_rate_par": 7, "false_pos_cost": [0, 2, 5, 6, 7], "false_positive_cost": 0, "false_positive_rate_par": [7, 11], "fast": 11, "faster": 0, "featur": [0, 2, 4, 5, 6, 7], "feature_col": 5, "femal": 3, "fer": [4, 5], "fetch_adult": 3, "few": [3, 5, 11], "fig_kwarg": 0, "figsiz": [3, 5, 6, 7], "figur": [0, 3], "file": [1, 5, 8], "file_prefix": 4, "filter": 2, "find": [0, 5, 11], "find_points_for_target_roc": 0, "find_weights_given_two_point": 0, "finer": 2, "first": 0, "fit": [0, 2, 3, 6, 7, 11], "fit_and_evaluate_postprocess": 0, "fit_data": [0, 3, 5, 6, 7], "float": [0, 2, 3, 4, 6, 7], "fn": [0, 3], "fn_cost": [2, 5, 6, 7], "fnr": [0, 6, 7], "folder": [4, 11], "folktabl": [1, 5], "follow": [0, 3, 4, 5, 6, 7, 8], "fontsiz": 3, "forc": [0, 1, 5, 6, 7], "form": 0, "format": 0, "formul": 2, "forum": [8, 11], "found": [0, 2, 5, 6, 7, 11], "fp": [0, 3], "fp_cost": [2, 5, 6, 7], "fpr": [0, 1, 5, 6, 7, 11], "fpr_diff": 7, "from": [0, 2, 3, 4, 11], "frontier": [0, 1, 5], "fulfil": [0, 2, 5, 11], "full": [2, 8], "function": 0, "functool": 4, "further": 3, "g": [0, 3, 4], "gaussian": [2, 6, 7], "gca": 3, "gcl": [4, 5], "gener": [0, 2, 4, 5, 6, 7], "generate_synthetic_data": [2, 6, 7], "get_data": 4, "get_envelope_of_postprocessing_fronti": 0, "getattr": [4, 5], "git": 11, "github": [0, 3, 5, 8, 11], "given": [0, 1, 4, 11], "global": [0, 2, 3, 4, 5, 6, 7], "global_clf_realized_roc_point": [5, 6, 7], "global_color": [5, 6, 7], "global_preval": 0, "global_roc_point": [0, 5, 6, 7], "go": 3, "goe": 0, "gonna": 4, "got": 2, "granular": 0, "grei": 3, "grid": [2, 3, 5, 6, 7], "group": [0, 2, 3, 4, 5, 6, 7, 8, 11], "group_filt": [2, 5, 6, 7], "group_kei": 2, "group_membership": 2, "group_name_map": [0, 5], "group_nois": [2, 6, 7], "group_score_pr": 2, "group_siz": 4, "group_sizes_label_neg": 0, "group_sizes_label_po": 0, "group_test": 11, "group_thr": 2, "group_threshold": 2, "group_threshold_combin": 2, "group_to_clf": 0, "groupwis": 0, "groupwise_label_neg_weight": 0, "groupwise_label_pos_weight": 0, "groupwise_preval": 0, "groupwise_roc_data": 0, "groupwise_roc_hul": 0, "groupwise_roc_point": [0, 5, 6, 7], "gt": [3, 5, 6, 7], "ha": [0, 2, 3, 4, 5, 6, 7], "halfspac": 0, "hand": 0, "handl": 0, "hardt": [3, 8, 11], "hat": 11, "have": [0, 2, 4, 6, 7, 11], "hawaiian": 5, "header": 4, "helper": [0, 2, 6, 7], "here": 11, "hi_thr": 2, "high": [2, 6, 7], "high_thr": 2, "higher": 0, "highest": 4, "horizon": 4, "horizont": 0, "horizontalalign": 3, "how": 0, "hpt": 0, "hstack": [3, 5], "html": [0, 3, 5], "http": [0, 3, 8, 11], "hull": [0, 5, 6, 7, 11], "hull_point": 0, "hyperparamet": 3, "i": [0, 2, 3, 4, 5, 6, 7, 8, 11], "iclr": 11, "id": [8, 11], "idx": [0, 2, 4, 5, 6, 7], "ignor": 0, "ignore_col": 5, "impact": 3, "implement": 11, "import": [2, 3, 4, 5, 6, 7, 11], "inaccur": 0, "includ": [0, 8], "inconsist": 0, "increas": 3, "indent": 4, "index": [2, 4, 6, 7, 8], "index_col": 5, "index_label": 4, "indian": [3, 5], "individu": 3, "induc": [2, 6, 7], "inequ": [0, 2, 6, 7], "inf": [0, 5, 6, 7, 11], "infin": [0, 5], "info": [5, 6, 7], "inform": [0, 11], "infti": [5, 6], "initi": 0, "inner": 0, "inner_ytick": 0, "inproc_clf": 3, "inproc_postproc_results_df": 3, "inproc_test_result": 3, "inproceed": [8, 11], "inprocess": [1, 3], "input": 0, "instal": [2, 3, 5, 6, 7], "instead": 0, "int": [0, 2, 3, 4, 5, 6, 7], "integ": [2, 4, 6, 7], "intercept": 0, "interfac": 0, "interior": [0, 11], "intern": [0, 8, 11], "interpol": 0, "interv": 0, "interven": 3, "intervent": [0, 3], "introduc": 3, "invalid": 0, "ipynb": [1, 5], "isclos": [2, 4], "isinst": 2, "island": 3, "item": [2, 3], "iter": 2, "itertool": [2, 5, 6, 7], "its": [0, 8, 11], "job": 0, "jr03sfwsb": [8, 11], "json": 4, "jupyt": [3, 5, 8], "just": [0, 2, 6, 7], "jwtr": [4, 5], "k": 0, "keep": 4, "kei": [0, 3, 5, 11], "kept": 4, "key_1": 0, "kwarg": [0, 3, 7], "l": [0, 3, 5, 7], "l2": [5, 6, 7], "l_p_norm": [0, 5, 6, 7, 11], "l_p_norm_str": [5, 6], "label": [0, 2, 3, 4, 5, 6, 7], "label_col": 5, "lambda": [2, 5, 6, 7, 11], "larg": 0, "larger": [0, 5, 6, 7], "largest": 4, "largest_groups_name_map": 5, "later": 4, "lead": 0, "learn": [0, 8, 11], "least": 4, "left": [0, 3, 11], "leftarrow": [3, 5, 6, 7], "legend": [0, 3, 5], "len": [0, 2, 4, 5, 6, 7], "leq": 11, "level": [0, 2, 5, 6, 7, 11], "lgbmclassifi": 3, "lgbmclassifierlgbmclassifi": 3, "lie": 0, "lightgbm": 3, "linalg": [5, 6, 7], "line": [0, 3], "linear": 0, "linestyl": [3, 5, 6, 7], "link": 0, "list": [0, 4, 5, 6, 7], "ll": 3, "ln": 0, "lo_thr": 2, "load": [3, 4, 5], "load_ac": 4, "load_acs_data": 5, "loc": [3, 4], "local": 11, "log": [2, 3, 5, 6, 7], "log_loss": 0, "logic": 0, "loss": [0, 5, 6, 7], "low": [2, 4, 6, 7], "low_thr": 2, "lower": 0, "lowest": [0, 4], "lp": [0, 6], "lp_acc": [2, 6], "lp_eq_odd": [2, 6], "lt": [3, 5, 6, 7], "lvert": 11, "lw": [3, 5, 6, 7], "m": [2, 3, 5, 6, 7], "made": 11, "mai": [0, 3, 5, 11], "main": [0, 3], "make": [0, 4], "make_cvxpy_halfspace_inequ": 0, "make_cvxpy_point_in_polygon_constraint": 0, "male": 3, "mani": 0, "map": [0, 1, 2, 4, 6, 7, 8], "map_to_sequenti": 4, "mar": [4, 5], "marit": [4, 5], "marker": [3, 5, 6, 7], "markers": [5, 6, 7], "match": [0, 11], "materi": 8, "mathbb": 11, "mathcal": 11, "matplotlib": [0, 3, 5, 6, 7], "max": [2, 3, 4, 5, 6, 7], "max_": 11, "max_it": 3, "max_roc_tick": [0, 2, 6, 7], "max_sensitive_group": 4, "maxim": 2, "maximum": [0, 5, 7, 11], "mean": [2, 3, 4, 5, 6, 7], "measur": [5, 6, 7], "meet": 11, "membership": 0, "method": [0, 3], "metric": [0, 1, 2, 6, 7, 11], "metric_nam": 0, "metric_valu": 0, "middle_scores_filt": 2, "mig": [4, 5], "mil": [4, 5], "militari": [4, 5], "min": 4, "minim": [5, 6, 7], "minimum": 3, "minut": [2, 3, 5], "mkdir": 4, "ml": 11, "mobil": [4, 5], "model": [0, 5, 6, 7, 11], "model_nam": [0, 3, 5, 6], "model_select": [3, 4], "modul": [8, 9], "more": 0, "moritz": [8, 11], "multi": 5, "multipl": [0, 5], "must": [0, 4], "n": [2, 3, 6], "n_color": [5, 6, 7], "n_dim": 0, "n_group": [0, 2, 5, 6, 7], "n_hull_point": 0, "n_job": [0, 3, 5, 6, 7], "n_point": 0, "n_roc_dim": 0, "n_sampl": [2, 6, 7], "name": [0, 5], "nan": 0, "nativ": [4, 5], "nbviewer": [3, 5], "ndarrai": [0, 3], "necessari": [0, 1, 4, 11], "need": [0, 4, 7], "neg": [0, 2, 3, 5, 6, 7], "net": [8, 11], "new": [0, 2], "new_test_s": 4, "nois": [2, 6, 7], "none": [0, 2, 3, 4, 5, 6], "norm": [0, 5, 6, 7], "normal": [2, 6, 7], "note": [0, 2, 3, 4, 5, 6], "notebook": [2, 3, 4, 5, 6, 7, 8, 11], "now": [4, 11], "np": [0, 2, 3, 4, 5, 6, 7, 11], "nu": 3, "num_determ_thr": 2, "num_featur": 0, "num_group": 0, "num_sampl": 0, "number": [0, 2, 4], "numer": 3, "numpi": [0, 2, 3, 4, 5, 6, 7], "nuniqu": 4, "o": [0, 3], "object": [0, 3, 4, 5], "obtain": 0, "occp": [4, 5], "occup": [4, 5], "odd": [0, 1, 2, 3, 7], "off": [1, 6, 8], "omit": 0, "onc": 0, "one": [0, 3], "ones": 4, "onli": [0, 4], "onward": 4, "openreview": [8, 11], "oper": 4, "opportun": 11, "optim": [0, 2, 11], "optima": 0, "optimum": 0, "option": [0, 4, 5, 6, 7], "or_": 4, "oral": 11, "ord": [5, 6, 7], "order": [0, 4], "org": [0, 3, 5], "origin": [4, 5, 6, 7], "other": [0, 1, 5, 11], "other_atom": 0, "other_df": 4, "other_idx": 4, "our": [2, 6, 7], "out": [0, 1, 2, 8], "outcom": 0, "outer": 0, "outer_ytick": 0, "output": [0, 11], "over": [0, 2, 11], "overrid": 0, "p": [0, 3, 5, 7, 11], "p1": 0, "p2": 0, "pac": 3, "packag": [3, 8, 9, 11], "page": [3, 5, 8], "pair": 0, "palett": [3, 5, 6, 7], "panda": [4, 5], "paper": 4, "parallel": 0, "paramet": [0, 4, 11], "parameter": [5, 6, 7], "parent": [4, 5], "pareto": [0, 1, 5], "pareto_curv": [3, 5, 6, 7, 9], "pariti": [0, 1, 5, 6, 7], "pars": [1, 5], "partial": [2, 11], "pass": 0, "path": [4, 5], "pathlib": [4, 5], "pd": [0, 4, 5], "per": [0, 2, 6, 7], "percentil": [0, 3], "perf_col": 0, "perf_metr": [0, 3, 5, 6, 7], "perform": [0, 2], "person": 4, "pip": [2, 3, 5, 6, 7, 11], "place": [4, 5], "pleas": [3, 5], "plot": 9, "plot_diagon": 0, "plot_global_optimum": 0, "plot_group_optima": 0, "plot_group_triangul": 0, "plot_polygon_edg": 0, "plot_postprocessing_fronti": [0, 3, 5, 6, 7], "plot_postprocessing_solut": [0, 5, 6, 7], "plot_relax": [0, 5, 6, 7], "plot_roc_curv": [0, 5, 6, 7], "plot_roc_hul": [0, 5, 6, 7], "plt": [3, 5, 6, 7], "plu": 4, "pobp": [4, 5], "point": [0, 4, 11], "point_a": 0, "point_b": 0, "polygon": 0, "polygon_point": 0, "polygon_vertic": 0, "pos_label": 3, "posit": [0, 2, 3, 5, 6, 7], "possibl": 0, "possibli": [0, 3, 11], "post": 0, "postproc_clf": [2, 5, 6], "postproc_results_df": [0, 3, 5, 6, 7], "postproc_templ": 0, "postprocess": [0, 1, 3, 5, 11], "postprocessed_clf": [0, 5, 6, 7], "powpuma": [4, 5], "ppr": [0, 1], "ppr_diff": 7, "pre": [0, 2, 4, 5, 6, 7], "precis": [0, 2], "pred": 2, "predict": [0, 2, 3, 4, 5, 6, 7, 11], "predict_method": [0, 3, 6, 7], "predict_proba": [0, 5, 11], "predictor": [0, 1, 3, 8, 11], "prefix": 4, "present": 11, "preval": [0, 2, 4, 5, 6, 7, 11], "print": [0, 2, 3, 4, 5, 6, 7], "probabl": [0, 5], "problem": [0, 2], "process": [0, 1, 4, 5], "produc": [0, 2, 6, 7], "product": [2, 5, 6, 7], "properti": 0, "protect": [0, 4], "provid": [0, 2, 11], "public": 8, "puma": [4, 5], "py": 0, "pypi": 11, "pyplot": [3, 5, 6, 7], "r": [0, 3, 5, 6, 7, 11], "rac1p": [4, 5], "race": [3, 4, 5], "rais": 0, "ran": [2, 5, 6, 7], "rand_clf": 0, "random": [0, 2, 3, 5, 6, 7, 11], "random_se": 0, "random_st": [3, 4], "randomforestclassifi": 5, "randomforestclassifierrandomforestclassifi": 5, "randomizedclassifi": 0, "randomli": 0, "rang": [0, 2, 4, 5, 6, 7], "rate": [0, 2, 5, 6, 7, 8], "ratio": 0, "ravel": [2, 7], "rc": [3, 5, 6, 7], "re": [0, 4], "read": 5, "read_csv": 5, "readm": 8, "real": [0, 11], "realiz": [0, 2], "realized_roc_point": [5, 6, 7], "reason": 7, "recal": 0, "red": 3, "reduc": 4, "reduct": 3, "redund": 0, "refer": 8, "rel": [0, 4], "relat": 0, "relationship": [4, 5], "relax": [0, 1, 5, 6, 7], "relaxedthresholdoptim": [0, 1, 2, 5, 6, 7, 11], "relp": [4, 5], "remain": 4, "remov": 4, "remove_state_col_lat": 4, "render": [3, 5], "replac": 7, "repo": 11, "report": 0, "repositori": 8, "repres": 0, "represent": [3, 5, 8, 11], "reproduc": 0, "requir": [0, 1, 2, 3, 5, 6, 7], "rerun": [3, 5], "reshap": [2, 6, 7], "respect": 0, "result": [0, 2, 3, 7], "retriev": 0, "return": [0, 2, 3, 4, 5, 6, 7], "return_groupwise_metr": 0, "return_x_i": 3, "rf_clf": 5, "right": [0, 3, 4, 11], "rightarrow": [3, 5, 6, 7], "rng": [2, 6, 7], "roc": [0, 11], "roc_a": 11, "roc_b": 11, "roc_convex_hul": 0, "roc_curv": [2, 5, 6, 7], "roc_curve_data": 0, "roc_point": 0, "roc_util": [5, 6, 7, 9], "root": [5, 6, 7], "root_dir": 4, "rotat": 3, "row": [0, 4], "rule": 0, "run": [1, 2, 3], "runtimeerror": 0, "rvert_p": 11, "s_fit": 5, "s_group": 2, "s_other": 3, "s_test": [3, 5], "s_train": [3, 5], "s_val": [3, 5], "same": [0, 3, 7], "sampl": [0, 2, 4, 6, 7], "saniti": 4, "save": 4, "save_to_disk": 4, "scale": [2, 6, 7], "scatterplot": 3, "scikit": 0, "scipi": [2, 5, 6, 7], "score": [0, 8, 11], "score_predictor": 0, "seaborn": [3, 5, 6, 7], "search": [2, 3], "second": 0, "see": [0, 11], "seed": [0, 2, 3, 4, 5, 6, 7], "seem": 4, "seen": 7, "select": 4, "self": 0, "sensit": [0, 3, 4, 11], "sensitive_attr": [0, 2, 5], "sensitive_attribut": [0, 3, 5, 7], "sensitive_col": [3, 5], "sensitive_col_invers": 3, "sensitive_col_map": 3, "sensitive_featur": 3, "separ": 0, "sequenc": 0, "serv": 0, "servic": [4, 5], "set": [0, 3, 4, 5, 6, 7, 11], "seven": [8, 11], "sever": 0, "sex": [3, 4, 5], "shape": [0, 4], "should": [0, 3, 4], "show": [0, 3, 5, 6, 7], "show_data_typ": [0, 3, 5, 6, 7], "show_results_on": 3, "shown": [0, 11], "shuffl": 4, "simpli": [2, 6, 7], "singl": [0, 2, 5], "size": [0, 2, 4, 5, 6, 7], "sklearn": [0, 2, 3, 4, 5, 6, 7, 11], "slack": [0, 3], "slope": 0, "slower": 3, "small": [3, 5, 6, 7], "smaller": [5, 6, 7], "sn": [3, 5, 6, 7], "so": [2, 4, 6, 7], "socialfound": [3, 11], "societ": 8, "solut": [0, 11], "solv": 0, "solve_brute_forc": 2, "solve_lp": 2, "solver": [0, 1, 5, 6, 7], "some": [0, 3, 11], "sort": [0, 4, 5], "sourc": [0, 11], "spatial": [2, 5, 6, 7], "specif": [0, 4, 11], "specifi": 0, "split": [3, 4], "split_folktables_task": 4, "split_x_y_": 5, "src": 0, "st": [4, 5], "stand": 1, "standard": 0, "start": 4, "state": [0, 3, 4], "state_col": 4, "state_col_data": 4, "state_list": 4, "static": 0, "statu": [4, 5, 6, 7], "step": 3, "str": [0, 4, 5, 6], "stratifi": [3, 4], "stratify_by_st": 4, "strict": 11, "style": [3, 5, 6, 7], "sub": 8, "subfolder_nam": 4, "sum": [0, 2, 5, 6, 7, 11], "superior": 2, "supp": 8, "supplementari": 8, "survei": 4, "survey_year": 4, "sy": [2, 3, 4, 5, 6, 7], "synthet": [1, 2], "t": [4, 5, 6, 7], "take": [0, 3, 5, 7], "target": [0, 2, 4, 5, 6, 11], "target_fpr": 0, "target_point": [0, 5, 6, 7], "target_roc_point": 0, "target_tpr": 0, "task": [4, 5], "task_nam": [4, 5], "task_obj": [4, 5], "templat": 0, "term": 0, "test": [0, 3, 4, 5], "test_data": 4, "test_df": 4, "test_idx": 4, "test_siz": [3, 4], "them": [2, 3, 5, 6, 7], "theoret": [0, 6, 7], "theoretical_global_cost": [6, 7], "thi": [0, 2, 3, 4, 5, 6, 7, 11], "third": 0, "threshold": [0, 1, 2, 3, 5, 11], "threshold_optim": [5, 6, 7, 9], "threshold_target": 0, "threshold_ticks_step": 2, "through": 0, "thrown": 0, "thrsh_dict": 2, "tick": 0, "time": [2, 3, 5, 6, 7], "titl": [3, 8, 11], "tnr": 0, "to_csv": 4, "to_list": 4, "to_numpi": [4, 5], "toler": [0, 2, 3, 5, 6, 7, 11], "tolerance_tick": [0, 3, 5], "tolerance_tick_step": 0, "took": [2, 5, 6, 7], "total": [2, 3, 5, 6, 7], "total_combin": 2, "tpr": [0, 1, 5, 6, 7, 11], "tpr_diff": [5, 7], "tqdm": [2, 4, 5], "trade": [1, 6, 8], "train": [0, 4, 11], "train_data": 4, "train_df": 4, "train_idx": 4, "train_siz": 4, "train_test_split": [3, 4], "triangul": [0, 5, 6, 7], "triplet": 0, "true": [0, 3, 4, 5, 6, 7], "true_negative_rate_par": 7, "true_positive_rate_par": [5, 7, 11], "trust": [3, 5], "try": [3, 4, 5], "tupl": [0, 2, 4, 5], "twelfth": [8, 11], "twice": 11, "two": [0, 2], "type": [0, 5], "types_dict": 4, "unabl": [3, 5], "unawar": 5, "uncertainti": 0, "unconstr_clf": 3, "unconstr_dispar": 3, "unconstr_perform": 3, "unconstr_test_result": 3, "unconstrain": [2, 5, 7], "under": [0, 11], "underli": 0, "unf_val": 5, "unfair": 5, "uniform": [0, 2], "uniqu": [0, 2, 3, 5], "unique_group": 2, "unpack": [2, 5], "unprocess": [8, 11], "unti": 0, "up": [0, 11], "updat": 4, "upper": [0, 3], "url": [8, 11], "us": [0, 1, 2, 3, 4, 6, 7, 11], "usag": 1, "user": [2, 3, 5, 6, 7], "usual": 0, "util": 0, "utility_par": 3, "val": [3, 4, 5], "val_df": 4, "val_idx": 4, "valid": [0, 3, 4, 5], "validation_data": 4, "validation_s": [3, 4], "valu": [0, 4, 11], "value_count": 4, "valueerror": 0, "vari": [0, 3], "variabl": [0, 4, 5, 6, 7], "varianc": [5, 6, 7], "variou": 8, "vector": 0, "verbos": 3, "vertic": [0, 3], "verticalalign": 3, "via": [0, 11], "violat": [0, 5, 6], "vstack": [5, 6, 7], "w": 0, "wall": [2, 3, 5, 6, 7], "want": [0, 4], "warn": 4, "we": [2, 3, 4, 6, 7, 11], "weert": 3, "weight": 0, "welcom": 11, "were": 4, "when": [0, 7, 11], "where": [0, 4, 11], "whether": [0, 4], "which": [0, 2, 6, 7, 11], "whichev": [0, 4], "while": [2, 5], "white": [3, 4, 5], "whitegrid": [3, 5, 6, 7], "whole": 0, "whose": 0, "wise": [0, 5, 6, 7, 11], "within": 0, "word": [0, 5, 11], "worker": [4, 5], "wrapper": 0, "www": 0, "x": [0, 3, 4, 11], "x_feat": 2, "x_fit": 5, "x_other": 3, "x_test": [3, 5, 11], "x_train": [3, 5], "x_val": [3, 5], "xlabel": [3, 5, 6, 7], "xlim": [3, 5, 6], "xtick": 0, "xy": 3, "y": [0, 3, 11], "y_fit": 5, "y_fit_pr": 5, "y_fit_pred_scor": 0, "y_label": 2, "y_other": 3, "y_pred": [0, 7, 11], "y_pred_binari": [0, 2, 5, 6, 7], "y_pred_binary_brute_forc": 2, "y_pred_binary_lp": 2, "y_pred_scor": [0, 3], "y_pred_test": 11, "y_score": [0, 2, 6, 7], "y_test": [3, 5], "y_test_scor": 5, "y_train": [3, 5], "y_true": [0, 2, 3, 5, 6, 7], "y_true_groupwis": [2, 6, 7], "y_val": [3, 5], "year": [4, 8, 11], "yet": 4, "ylabel": [3, 5, 6, 7], "ylim": [3, 5, 6], "you": [0, 3, 4, 7, 8, 11], "zero": [2, 6, 7], "zeros_lik": 2, "zip": [2, 4, 5, 6, 7], "zorder": 3}, "titles": ["<code class=\"code docutils literal notranslate\"><span class=\"pre\">error_parity</span></code> package", "Example jupyter notebooks", "Comparison between <code class=\"docutils literal notranslate\"><span class=\"pre\">error-parity</span></code>\u2019s LP solver and a brute-force solver", "Example usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">error-parity</span></code> with other fairness-constrained classifiers", "Obtaining parsed folktables datasets", "Achieving <em>equalized odds</em> on real-world ACS data (ACSIncome)", "Achieving <em>equalized odds</em> on synthetic data", "Achieving different fairness constraints on synthetic data", "Welcome to error-parity\u2019s documentation!", "API reference", "Notebooks Gallery", "README.md"], "titleterms": {"": [2, 3, 5, 6, 7, 8], "1": 2, "2": 2, "ac": 5, "accuraci": [2, 3, 4, 7], "achiev": [5, 6, 7], "acsincom": 5, "adjust": 3, "adult": 3, "anoth": 3, "api": 9, "attain": 3, "awar": 3, "between": [2, 6, 7], "binar": 0, "brute": 2, "chang": 7, "cite": [8, 11], "classifi": [0, 3, 4, 5, 6, 7], "compar": 2, "comparison": 2, "comput": [6, 7], "constant": 4, "constrain": 3, "constraint": [2, 7, 11], "construct": [5, 6, 7], "cvxpy_util": 0, "data": [2, 3, 4, 5, 6, 7], "dataset": 4, "deriv": [5, 6, 7], "differ": [6, 7], "distanc": [6, 7], "document": 8, "each": 4, "empir": [6, 7], "equal": [5, 6, 11], "error": [2, 3, 8, 11], "error_par": 0, "evalu": 0, "exampl": [1, 3, 5], "fair": [3, 5, 6, 7, 11], "fairness_constraint": 7, "fetch": 3, "fit": 5, "folktabl": 4, "forc": 2, "from": [5, 6, 7], "frontier": [3, 6, 7], "galleri": 10, "get": 11, "given": [2, 5, 6, 7], "how": 11, "indic": 8, "instal": 11, "jupyt": 1, "let": 3, "log": 4, "lp": 2, "map": 3, "md": 11, "metric": 5, "model": 3, "modul": 0, "note": 7, "notebook": [1, 10], "obtain": 4, "odd": [5, 6, 11], "off": [3, 5], "omit": 11, "opportun": 5, "optim": [5, 6, 7], "other": 3, "output": [2, 5, 6, 7], "packag": 0, "pareto": [6, 7], "pareto_curv": 0, "pariti": [2, 3, 8, 11], "pars": 4, "perform": [5, 6, 7], "plot": [0, 3, 5, 6, 7], "point": [5, 6, 7], "post": 3, "postprocess": [6, 7], "predictor": [2, 5, 6, 7], "process": 3, "readm": 11, "real": [2, 5, 6, 7], "realiz": [5, 6, 7], "refer": 9, "relax": [3, 11], "result": 5, "roc": [5, 6, 7], "roc_util": 0, "score": [2, 5, 6, 7], "similar": 5, "solut": [2, 5, 6, 7], "solver": 2, "some": [2, 5, 6, 7], "standard": 3, "start": 11, "synthet": [6, 7], "target": 7, "theoret": 5, "theoriz": [6, 7], "threshold_optim": 0, "toc": 11, "trade": [3, 5], "train": [2, 3, 5, 6, 7], "type": [3, 4], "uci": 3, "unconstrain": 3, "us": 5, "usag": 3, "v": [2, 5], "valu": [2, 5, 6, 7], "via": 3, "violat": [2, 7], "welcom": 8, "work": 11, "world": 5, "x": [2, 5, 6, 7], "y": [2, 5, 6, 7], "your": 7}})